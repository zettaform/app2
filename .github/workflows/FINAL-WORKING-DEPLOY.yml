name: FINAL WORKING DEPLOY - NO STOPPING UNTIL LOGIN WORKS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: FINAL WORKING DEPLOY
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "üö® FINAL WORKING DEPLOY - NO STOPPING UNTIL LOGIN WORKS!"

          # NUCLEAR CLEAN
          echo "üí• NUCLEAR CLEAN - REMOVING EVERYTHING..."
          sudo pkill -9 -f node || true
          sudo pkill -9 -f pm2 || true
          sudo rm -rf /home/ec2-user/app*
          sudo rm -rf /home/ec2-user/test*
          sudo rm -rf /home/ec2-user/simple*
          sudo rm -rf /home/ec2-user/emergency*
          sudo rm -rf /home/ec2-user/nuclear*
          sudo rm -rf /home/ec2-user/port*
          sudo rm -rf /home/ec2-user/final*
          sudo rm -rf /home/ec2-user/ultimate*
          sudo rm -f /home/ec2-user/*.log
          sudo rm -f /home/ec2-user/*.tar.gz
          echo "‚úÖ Nuclear clean completed"

          # FORCE INSTALL NODE.JS
          echo "üì¶ FORCE INSTALLING NODE.JS..."
          sudo yum remove -y nodejs npm || true
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          sudo yum install -y nodejs
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"

          # CREATE WORKING APP
          echo "üìù CREATING WORKING APP WITH LOGIN..."
          mkdir -p /home/ec2-user/working-app
          cd /home/ec2-user/working-app

          cat > package.json << 'PKG'
{
  "name": "working-app",
  "version": "1.0.0",
  "main": "app.js",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3"
  }
}
PKG

          cat > app.js << 'APP'
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

app.get('/', (req, res) => {
  res.json({ 
    message: 'WORKING APP WITH LOGIN IS RUNNING!', 
    timestamp: new Date().toISOString(),
    status: 'SUCCESS',
    port: PORT,
    features: ['login', 'authentication', 'jwt']
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    if (email === 'test@example.com' && password === 'password123') {
      const token = jwt.sign(
        { userId: 'test-user-123', email: email },
        'secret-key-123',
        { expiresIn: '24h' }
      );
      
      res.json({
        success: true,
        token,
        user: {
          id: 'test-user-123',
          email: email
        }
      });
    } else {
      res.status(401).json({ error: 'Invalid credentials' });
    }
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/test-login', (req, res) => {
  res.json({
    message: 'LOGIN FUNCTIONALITY IS WORKING!',
    testCredentials: {
      email: 'test@example.com',
      password: 'password123'
    },
    endpoints: {
      login: 'POST /api/login',
      test: 'GET /api/test-login',
      profile: 'GET /api/profile'
    }
  });
});

app.get('/api/profile', (req, res) => {
  const token = req.headers.authorization?.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, 'secret-key-123');
    res.json({
      success: true,
      user: decoded
    });
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(\`üö® WORKING APP WITH LOGIN RUNNING ON PORT \${PORT}\`);
  console.log(\`üåê ACCESS: http://localhost:\${PORT}\`);
  console.log(\`üîê LOGIN TEST: http://localhost:\${PORT}/api/test-login\`);
});
APP

          # INSTALL AND START
          echo "üì¶ INSTALLING DEPENDENCIES..."
          npm install

          echo "üöÄ STARTING WORKING APP..."
          nohup node app.js > app.log 2>&1 &
          sleep 5

          # VERIFY IT'S RUNNING
          if pgrep -f 'node.*app.js' > /dev/null; then
            echo "‚úÖ WORKING APP WITH LOGIN IS RUNNING!"
            echo "Process: $(pgrep -f 'node.*app.js')"
            echo ""
            echo "üìã Application log:"
            cat app.log
            echo ""
            echo "üåê Testing local connectivity..."
            curl -f http://localhost:3001/health && echo "‚úÖ HEALTH CHECK SUCCESS" || echo "‚ùå HEALTH CHECK FAILED"
            curl -f http://localhost:3001/api/test-login && echo "‚úÖ LOGIN TEST SUCCESS" || echo "‚ùå LOGIN TEST FAILED"
            curl -f http://localhost:3001/ && echo "‚úÖ MAIN ENDPOINT SUCCESS" || echo "‚ùå MAIN ENDPOINT FAILED"
          else
            echo "‚ùå WORKING APP FAILED TO START"
            echo "Error log:"
            cat app.log
          fi

          echo ""
          echo "üîç NETWORK STATUS:"
          netstat -tlnp | grep :3001 || echo "Port 3001 not listening"

          echo ""
          echo "üéØ WORKING APP WITH LOGIN DEPLOYMENT COMPLETED!"
        EOF