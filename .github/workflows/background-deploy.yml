name: Background Agent Auto Deploy

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - restart

jobs:
  background-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      if: github.event.inputs.deployment_type == 'full'
      run: npm ci
      
    - name: Build application
      if: github.event.inputs.deployment_type == 'full'
      run: npm run build
      
    - name: Create environment file from template
      run: |
        # Use the .env.github template and substitute GitHub secrets
        cp .env.github .env
        # The .env.github file already contains the GitHub secret references
        # GitHub Actions will automatically substitute them during deployment
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/app2-key-pair.pem
        chmod 600 ~/.ssh/app2-key-pair.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Quick Deploy (Code Only)
      if: github.event.inputs.deployment_type == 'quick'
      run: |
        # Copy only source files for quick deployment
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/app2-key-pair.pem" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='dist' \
          --exclude='.github' \
          src/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app2/src/
          
        # Restart container
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user/app2
          docker restart app2-container
        EOF
        
    - name: Full Deploy
      if: github.event.inputs.deployment_type == 'full'
      run: |
        # Create deployment package (exclude tar file itself to prevent conflicts)
        tar -czf app2-deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='app2-deployment.tar.gz' \
          .
          
        # Copy to EC2
        scp -i ~/.ssh/app2-key-pair.pem app2-deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/
        
        # Deploy on EC2
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user
          
          # Stop existing container
          docker stop app2-container 2>/dev/null || true
          docker rm app2-container 2>/dev/null || true
          
          # Backup and replace app
          rm -rf app2-backup
          mv app2 app2-backup 2>/dev/null || true
          
          # Create new app directory and extract
          mkdir -p app2
          cd app2
          tar -xzf ../app2-deployment.tar.gz --strip-components=0
          
          # Build and run new container
          docker build -t app2 .
          docker run -d -p 3001:3001 --name app2-container app2
          
          # Cleanup
          rm -f /home/ec2-user/app2-deployment.tar.gz
        EOF
        
    - name: Restart Only
      if: github.event.inputs.deployment_type == 'restart'
      run: |
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user/app2
          docker restart app2-container
        EOF
        
    - name: Verify deployment
      run: |
        sleep 15
        for i in {1..5}; do
          if curl -f http://${{ secrets.EC2_HOST }}:3001/; then
            echo "✅ Application is running successfully!"
            break
          else
            echo "⏳ Waiting for application to start... (attempt $i/5)"
            sleep 10
          fi
        done
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/app2-key-pair.pem
        rm -f app2-deployment.tar.gz
