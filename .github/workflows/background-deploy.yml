name: Background Agent Auto Deploy

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - restart

jobs:
  background-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      if: github.event.inputs.deployment_type == 'full'
      run: npm ci
      
    - name: Build application
      if: github.event.inputs.deployment_type == 'full'
      run: npm run build
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/app2-key-pair.pem
        chmod 600 ~/.ssh/app2-key-pair.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Quick Deploy (Code Only)
      if: github.event.inputs.deployment_type == 'quick'
      run: |
        # Copy only source files for quick deployment
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/app2-key-pair.pem" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='dist' \
          --exclude='.github' \
          src/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app2/src/
          
        # Restart container
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user/app2
          docker restart app2-container
        EOF
        
    - name: Full Deploy
      if: github.event.inputs.deployment_type == 'full'
      run: |
        # Create deployment package in a clean directory to avoid file conflicts
        mkdir -p deployment-temp
        cp -r . deployment-temp/
        cd deployment-temp
        
        # Remove files that shouldn't be deployed
        rm -rf .git .github node_modules dist build *.log .env* app2-deployment.tar.gz
        
        # Create tar archive from clean directory
        tar -czf ../app2-deployment.tar.gz .
        cd ..
        
        # Clean up temp directory
        rm -rf deployment-temp
          
        # Copy to EC2
        scp -i ~/.ssh/app2-key-pair.pem app2-deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/
        
        # Deploy on EC2
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user
          
          # Stop existing container
          docker stop app2-container 2>/dev/null || true
          docker rm app2-container 2>/dev/null || true
          
          # Backup and replace app
          rm -rf app2-backup
          mv app2 app2-backup 2>/dev/null || true
          
          # Create new app directory and extract
          mkdir -p app2
          cd app2
          tar -xzf ../app2-deployment.tar.gz --strip-components=0
          
          # Create .env file on EC2 with environment variables
          cat > .env << 'ENVEOF'
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=${{ secrets.PORT }}
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
          DDB_USERS_TABLE=${{ secrets.DDB_USERS_TABLE }}
          DDB_CUSTOMERS_TABLE=${{ secrets.DDB_CUSTOMERS_TABLE }}
          DDB_FEEDBACK_TABLE=${{ secrets.DDB_FEEDBACK_TABLE }}
          DDB_ORDERS_TABLE=${{ secrets.DDB_ORDERS_TABLE }}
          DDB_ANALYTICS_TABLE=${{ secrets.DDB_ANALYTICS_TABLE }}
          DDB_ADMIN_KEYS_TABLE=${{ secrets.DDB_ADMIN_KEYS_TABLE }}
          DDB_EXTERNAL_LOGS_TABLE=${{ secrets.DDB_EXTERNAL_LOGS_TABLE }}
          ADMIN_KEYS_TABLE=${{ secrets.ADMIN_KEYS_TABLE }}
          EXTERNAL_USER_LOGS_TABLE=${{ secrets.EXTERNAL_USER_LOGS_TABLE }}
          REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}
          REACT_APP_ENVIRONMENT=${{ secrets.REACT_APP_ENVIRONMENT }}
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
          REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }}
          REACT_APP_BUILD_ENV=${{ secrets.REACT_APP_BUILD_ENV }}
          REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}
          REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}
          REACT_APP_ENABLE_LOGGING=${{ secrets.REACT_APP_ENABLE_LOGGING }}
          REACT_APP_ENABLE_ANALYTICS=${{ secrets.REACT_APP_ENABLE_ANALYTICS }}
          ADMIN_GLOBAL_KEY=${{ secrets.ADMIN_GLOBAL_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}
          MAX_REQUEST_SIZE=${{ secrets.MAX_REQUEST_SIZE }}
          REQUEST_TIMEOUT=${{ secrets.REQUEST_TIMEOUT }}
          FRONTEND_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          ENVEOF
          
          # Build and run new container
          docker build -t app2 .
          docker run -d -p 3001:3001 --name app2-container app2
          
          # Cleanup
          rm -f /home/ec2-user/app2-deployment.tar.gz
        EOF
        
    - name: Restart Only
      if: github.event.inputs.deployment_type == 'restart'
      run: |
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user/app2
          docker restart app2-container
        EOF
        
    - name: Verify deployment
      run: |
        sleep 15
        for i in {1..5}; do
          if curl -f http://${{ secrets.EC2_HOST }}:3001/; then
            echo "✅ Application is running successfully!"
            break
          else
            echo "⏳ Waiting for application to start... (attempt $i/5)"
            sleep 10
          fi
        done
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/app2-key-pair.pem
        rm -f app2-deployment.tar.gz
