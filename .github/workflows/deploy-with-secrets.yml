name: Deploy to EC2 with Proper Secret Integration

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (ignore running processes)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
  push:
    branches: [ main ]

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    outputs:
      secrets-valid: ${{ steps.validate.outputs.valid }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Validate GitHub Secrets
      id: validate
      run: |
        echo "🔍 Validating GitHub secrets configuration..."
        
        # Check critical secrets
        missing_secrets=()
        
        [ -z "${{ secrets.EC2_HOST }}" ] && missing_secrets+=("EC2_HOST")
        [ -z "${{ secrets.EC2_USER }}" ] && missing_secrets+=("EC2_USER")
        [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ] && missing_secrets+=("EC2_SSH_PRIVATE_KEY")
        [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && missing_secrets+=("AWS_ACCESS_KEY_ID")
        [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && missing_secrets+=("AWS_SECRET_ACCESS_KEY")
        [ -z "${{ secrets.JWT_SECRET }}" ] && missing_secrets+=("JWT_SECRET")
        [ -z "${{ secrets.ADMIN_GLOBAL_KEY }}" ] && missing_secrets+=("ADMIN_GLOBAL_KEY")
        [ -z "${{ secrets.PASSWORD_SALT }}" ] && missing_secrets+=("PASSWORD_SALT")
        
        if [ ${#missing_secrets[@]} -ne 0 ]; then
          echo "❌ Missing required secrets:"
          for secret in "${missing_secrets[@]}"; do
            echo "  - $secret"
          done
          echo "::set-output name=valid::false"
          exit 1
        else
          echo "✅ All required secrets are configured"
          echo "::set-output name=valid::true"
        fi

  deploy:
    needs: validate-secrets
    runs-on: ubuntu-latest
    if: needs.validate-secrets.outputs.secrets-valid == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Validate SSH key format
        if ! grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/deploy_key; then
          echo "❌ SSH private key format is invalid"
          exit 1
        fi
        
        echo "✅ SSH key configured"

    - name: Test SSH Connection
      run: |
        echo "🔌 Testing SSH connection to ${{ secrets.EC2_HOST }}..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

    - name: Build Application
      run: |
        echo "🔨 Building application..."
        npm ci
        
        # Build if build script exists
        if grep -q '"build"' package.json; then
          npm run build
        fi

    - name: Create Deployment Package
      run: |
        echo "📦 Creating deployment package..."
        
        # Clean up
        rm -rf deployment-package
        mkdir -p deployment-package
        
        # Copy application files
        cp -r src deployment-package/ 2>/dev/null || true
        cp -r public deployment-package/ 2>/dev/null || true
        cp package.json deployment-package/
        cp package-lock.json deployment-package/ 2>/dev/null || true
        cp server.js deployment-package/ 2>/dev/null || true
        cp enhanced-production-server.js deployment-package/ 2>/dev/null || true
        cp ecosystem.config.js deployment-package/ 2>/dev/null || true
        
        # Copy built files
        [ -d "dist" ] && cp -r dist deployment-package/
        [ -d "build" ] && cp -r build deployment-package/
        
        # Create production .env with actual secret values
        cat > deployment-package/.env << 'ENV_EOF'
NODE_ENV=production
PORT=3001
ENVIRONMENT=prod
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
AWS_DEFAULT_REGION=us-east-1
ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
EXTERNAL_USER_LOGS_TABLE=prod-external-user-creation-logs
DDB_USERS_TABLE=prod-users
DDB_CUSTOMERS_TABLE=prod-customers
DDB_FEEDBACK_TABLE=prod-feedback
DDB_ORDERS_TABLE=prod-orders
DDB_ANALYTICS_TABLE=prod-analytics
DDB_ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
DDB_EXTERNAL_LOGS_TABLE=prod-external-user-creation-logs
ADMIN_GLOBAL_KEY=${{ secrets.ADMIN_GLOBAL_KEY }}
JWT_SECRET=${{ secrets.JWT_SECRET }}
PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}
CORS_ORIGIN=http://${{ secrets.EC2_HOST }}:3001,https://${{ secrets.EC2_HOST }}:3001,http://localhost:5174
LOG_LEVEL=info
LOG_FILE_PATH=./logs/app.log
MAX_REQUEST_SIZE=10mb
REQUEST_TIMEOUT=30000
REACT_APP_AWS_REGION=us-east-1
REACT_APP_ENVIRONMENT=prod
REACT_APP_API_BASE_URL=http://${{ secrets.EC2_HOST }}:3001/api
REACT_APP_BACKEND_URL=http://${{ secrets.EC2_HOST }}:3001
REACT_APP_BUILD_ENV=production
REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
REACT_APP_ENABLE_LOGGING=false
REACT_APP_ENABLE_ANALYTICS=true
FRONTEND_API_BASE_URL=http://${{ secrets.EC2_HOST }}:3001/api
BACKEND_URL=http://${{ secrets.EC2_HOST }}:3001
EC2_HOST=${{ secrets.EC2_HOST }}
EC2_USER=${{ secrets.EC2_USER }}
EC2_SSH_KEY_PATH=app2-key-pair.pem
ENV_EOF
        
        # Create deployment archive
        tar -czf app-deployment.tar.gz .
        echo "✅ Deployment package created"

    - name: Deploy to EC2
      run: |
        echo "🚀 Deploying to EC2..."
        
        # Copy deployment package
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          deployment-package/app-deployment.tar.gz \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/
        
        # Execute deployment
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'DEPLOY_SCRIPT'
          
          set -e
          echo "🚀 Starting EC2 deployment..."
          
          # Handle force deploy option
          FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
          if [ "$FORCE_DEPLOY" = "true" ]; then
            echo "💥 Force deploy: killing all existing processes..."
            sudo pkill -9 -f node || true
            sudo pkill -9 -f pm2 || true
          else
            echo "🛑 Gracefully stopping existing processes..."
            pkill -f 'node.*server' || true
            pkill -f 'pm2' || true
          fi
          
          sleep 3
          
          # Clean up
          echo "🧹 Cleaning up previous deployments..."
          rm -rf /home/ec2-user/app
          mkdir -p /home/ec2-user/app
          cd /home/ec2-user/app
          
          # Extract
          echo "📦 Extracting deployment..."
          tar -xzf /home/ec2-user/app-deployment.tar.gz
          
          # Install Node.js if needed
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js..."
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          # Install PM2 if needed
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            sudo npm install -g pm2
          fi
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm install --production --no-optional
          
          # Create logs directory
          mkdir -p logs
          
          # Determine server file
          if [ -f "server.js" ]; then
            SERVER_FILE="server.js"
          elif [ -f "enhanced-production-server.js" ]; then
            SERVER_FILE="enhanced-production-server.js"
          else
            echo "❌ No server file found"
            exit 1
          fi
          
          echo "Using server file: $SERVER_FILE"
          
          # Start with PM2
          echo "🚀 Starting application..."
          pm2 delete app2 || true
          pm2 start $SERVER_FILE --name app2 --env production
          pm2 save
          
          sleep 5
          
          # Verify
          if pgrep -f "node.*$SERVER_FILE" > /dev/null; then
            echo "✅ Application started successfully"
            echo "Process ID: $(pgrep -f "node.*$SERVER_FILE")"
            
            # Test endpoints
            curl -f http://localhost:3001/health && echo "✅ Health check OK" || echo "❌ Health check failed"
            curl -f http://localhost:3001/ && echo "✅ Main endpoint OK" || echo "❌ Main endpoint failed"
            
            # Show status
            pm2 status
            pm2 logs app2 --lines 5 --nostream
          else
            echo "❌ Application failed to start"
            pm2 logs app2 --lines 20 --nostream
            exit 1
          fi
          
          echo "🎯 Deployment completed successfully!"
DEPLOY_SCRIPT

    - name: Test External Access
      run: |
        echo "🔍 Testing external access..."
        sleep 5
        
        # Test connectivity
        if timeout 10 bash -c "</dev/tcp/${{ secrets.EC2_HOST }}/3001" 2>/dev/null; then
          echo "✅ Application is accessible externally"
          echo "🌐 URL: http://${{ secrets.EC2_HOST }}:3001"
          echo "🔍 Health: http://${{ secrets.EC2_HOST }}:3001/health"
          echo "🔐 Login test: http://${{ secrets.EC2_HOST }}:3001/api/test-login"
        else
          echo "⚠️ Application not accessible externally (may need security group configuration)"
        fi

    - name: Deployment Summary
      if: always()
      run: |
        echo ""
        echo "🎯 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "📍 EC2 Host: ${{ secrets.EC2_HOST }}"
        echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}:3001"
        echo "🔍 Health Check: http://${{ secrets.EC2_HOST }}:3001/health"
        echo "🔐 Login Test: http://${{ secrets.EC2_HOST }}:3001/api/test-login"
        echo ""
        echo "Test credentials:"
        echo "  Email: test@example.com"
        echo "  Password: password123"
        echo ""
        echo "✅ Deployment workflow completed!"