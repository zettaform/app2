name: Fix EC2 Instance

on:
  workflow_dispatch:

jobs:
  fix-ec2:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/app2-key-pair.pem
        chmod 600 ~/.ssh/app2-key-pair.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Fix EC2 Instance
      run: |
        echo "üîß Starting EC2 instance fix process..."
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        if ! ssh -i ~/.ssh/app2-key-pair.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"; then
          echo "‚ùå SSH connection failed!"
          exit 1
        fi
        echo "‚úÖ SSH connection successful"
        
        # Run comprehensive fix on EC2 instance
        echo "Running comprehensive EC2 instance fix..."
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "üîß COMPREHENSIVE EC2 INSTANCE FIX"
          echo "=================================="
          
          # Update system
          echo "üì¶ Updating system packages..."
          sudo yum update -y
          
          # Install Docker if not present
          echo "üê≥ Installing Docker..."
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "‚úÖ Docker installed and started"
          else
            echo "‚úÖ Docker already installed"
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Add user to docker group
          echo "üë§ Adding user to docker group..."
          sudo usermod -a -G docker ec2-user
          echo "‚úÖ User added to docker group"
          
          # Install Docker Compose if not present
          echo "üê≥ Installing Docker Compose..."
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "‚úÖ Docker Compose installed"
          else
            echo "‚úÖ Docker Compose already installed"
          fi
          
          # Clean up any existing containers and images
          echo "üßπ Cleaning up existing Docker resources..."
          docker stop \$(docker ps -aq) 2>/dev/null || echo "No containers to stop"
          docker rm \$(docker ps -aq) 2>/dev/null || echo "No containers to remove"
          docker rmi \$(docker images -q) 2>/dev/null || echo "No images to remove"
          docker system prune -af 2>/dev/null || echo "Docker system cleanup completed"
          
          # Test Docker installation
          echo "üß™ Testing Docker installation..."
          if docker --version; then
            echo "‚úÖ Docker version check passed"
          else
            echo "‚ùå Docker version check failed"
            exit 1
          fi
          
          # Test Docker daemon
          echo "üß™ Testing Docker daemon..."
          if docker info >/dev/null 2>&1; then
            echo "‚úÖ Docker daemon is running"
          else
            echo "‚ùå Docker daemon is not running"
            sudo systemctl restart docker
            sleep 5
            if docker info >/dev/null 2>&1; then
              echo "‚úÖ Docker daemon restarted successfully"
            else
              echo "‚ùå Docker daemon still not running"
              exit 1
            fi
          fi
          
          # Test Docker with hello-world
          echo "üß™ Testing Docker with hello-world..."
          if docker run --rm hello-world >/dev/null 2>&1; then
            echo "‚úÖ Docker hello-world test passed"
          else
            echo "‚ùå Docker hello-world test failed"
            exit 1
          fi
          
          # Check disk space
          echo "üíæ Checking disk space..."
          df -h
          AVAILABLE_SPACE=\$(df / | tail -1 | awk '{print \$4}')
          if [ "\$AVAILABLE_SPACE" -lt 2000000 ]; then
            echo "‚ö†Ô∏è Warning: Low disk space (\$AVAILABLE_SPACE KB available)"
            echo "Cleaning up temporary files..."
            sudo rm -rf /tmp/*
            sudo yum clean all
            echo "‚úÖ Cleanup completed"
          else
            echo "‚úÖ Sufficient disk space available"
          fi
          
          # Check memory
          echo "üß† Checking memory..."
          free -h
          
          # Ensure proper permissions
          echo "üîê Setting up permissions..."
          sudo chown -R ec2-user:ec2-user /home/ec2-user
          chmod 755 /home/ec2-user
          
          # Create necessary directories
          echo "üìÅ Creating necessary directories..."
          mkdir -p /home/ec2-user/logs
          mkdir -p /home/ec2-user/app2
          
          echo "‚úÖ EC2 instance fix completed successfully!"
          echo ""
          echo "üìä FINAL STATUS:"
          echo "  Docker installed: \$(command -v docker >/dev/null && echo '‚úÖ' || echo '‚ùå')"
          echo "  Docker running: \$(docker info >/dev/null 2>&1 && echo '‚úÖ' || echo '‚ùå')"
          echo "  Docker Compose: \$(command -v docker-compose >/dev/null && echo '‚úÖ' || echo '‚ùå')"
          echo "  User in docker group: \$(groups | grep -q docker && echo '‚úÖ' || echo '‚ùå')"
          echo "  Disk space: \$(df -h / | tail -1 | awk '{print \$4}') available"
          echo "  Memory: \$(free -h | grep Mem | awk '{print \$7}') available"
        EOF
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ EC2 instance fix completed successfully!"
        else
          echo "‚ùå EC2 instance fix failed!"
          exit 1
        fi
        
        echo "üéâ EC2 instance is now ready for deployment!"
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/app2-key-pair.pem