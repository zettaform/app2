name: Minimal Deploy to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/app2-key-pair.pem
        chmod 600 ~/.ssh/app2-key-pair.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test EC2 Connection
      run: |
        echo "üîç Testing EC2 connection..."
        ssh -i ~/.ssh/app2-key-pair.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
        
    - name: Check EC2 Status
      run: |
        echo "üîç Checking EC2 instance status..."
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "üìä EC2 INSTANCE STATUS"
          echo "====================="
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
          echo "Kernel: $(uname -r)"
          echo "Uptime: $(uptime)"
          echo ""
          echo "üíæ DISK SPACE:"
          df -h
          echo ""
          echo "üß† MEMORY:"
          free -h
          echo ""
          echo "üê≥ DOCKER STATUS:"
          if command -v docker &> /dev/null; then
            echo "Docker installed: ‚úÖ"
            docker --version
            sudo systemctl status docker --no-pager || echo "Docker service not running"
          else
            echo "Docker installed: ‚ùå"
          fi
          echo ""
          echo "üì¶ NODE.JS STATUS:"
          if command -v node &> /dev/null; then
            echo "Node.js installed: ‚úÖ"
            node --version
            npm --version
          else
            echo "Node.js installed: ‚ùå"
          fi
          echo ""
          echo "üì¶ PM2 STATUS:"
          if command -v pm2 &> /dev/null; then
            echo "PM2 installed: ‚úÖ"
            pm2 --version
          else
            echo "PM2 installed: ‚ùå"
          fi
          echo ""
          echo "üåê NETWORK STATUS:"
          echo "Internet connectivity:"
          ping -c 3 8.8.8.8 || echo "‚ùå No internet connectivity"
          echo ""
          echo "üë§ USER STATUS:"
          echo "Current user: $(whoami)"
          echo "User groups: $(groups)"
          echo "Home directory: $(ls -la /home/ec2-user | head -5)"
          echo ""
          echo "üîç RUNNING PROCESSES:"
          ps aux | grep -E "(node|pm2|docker)" | grep -v grep || echo "No relevant processes running"
          echo ""
          echo "üìã RECENT LOGS:"
          sudo journalctl -n 10 --no-pager || echo "Cannot access system logs"
        EOF
        
    - name: Install Node.js on EC2
      run: |
        echo "üì¶ Installing Node.js on EC2..."
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
            echo "‚úÖ Node.js installed"
          else
            echo "‚úÖ Node.js already installed"
          fi
          
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            sudo npm install -g pm2
            echo "‚úÖ PM2 installed"
          else
            echo "‚úÖ PM2 already installed"
          fi
        EOF
        
    - name: Deploy Simple App
      run: |
        echo "üöÄ Deploying simple test application..."
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user
          
          # Create simple test app
          cat > test-app.js << 'APPEOF'
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3001;

app.get('/', (req, res) => {
  res.json({
    message: 'Hello from EC2!',
    timestamp: new Date().toISOString(),
    status: 'success',
    port: PORT
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', uptime: process.uptime() });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Test app running on port ${PORT}`);
});
APPEOF
          
          # Create package.json
          cat > package.json << 'PKGEOF'
{
  "name": "test-app",
  "version": "1.0.0",
  "main": "test-app.js",
  "dependencies": {
    "express": "^4.18.2"
  }
}
PKGEOF
          
          # Install dependencies
          npm install
          
          # Stop any existing processes
          pm2 stop test-app 2>/dev/null || true
          pm2 delete test-app 2>/dev/null || true
          
          # Start with PM2
          pm2 start test-app.js --name test-app
          pm2 save
          
          # Wait and check status
          sleep 5
          pm2 status
          pm2 logs test-app --lines 5
        EOF
        
    - name: Test Application
      run: |
        echo "üß™ Testing application..."
        sleep 10
        
        for i in {1..3}; do
          echo "Attempt $i/3: Testing connection to ${{ secrets.EC2_HOST }}:3001"
          if curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.EC2_HOST }}:3001/; then
            echo "‚úÖ Test application is running successfully!"
            curl http://${{ secrets.EC2_HOST }}:3001/health
            exit 0
          else
            echo "‚ùå Connection failed, waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
        echo "‚ùå Test application verification failed"
        exit 1
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/app2-key-pair.pem