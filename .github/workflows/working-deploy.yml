name: Working Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/app2-key-pair.pem
        chmod 600 ~/.ssh/app2-key-pair.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        echo "🚀 Deploying to EC2..."
        
        # Test SSH connection
        ssh -i ~/.ssh/app2-key-pair.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
        
        # Create deployment package
        echo "📦 Creating deployment package..."
        tar -czf app2-deployment.tar.gz --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='dist' --exclude='build' --exclude='*.log' --exclude='.env*' --exclude='app2-deployment.tar.gz' .
        
        # Copy to EC2
        echo "📤 Copying to EC2..."
        scp -i ~/.ssh/app2-key-pair.pem app2-deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/
        
        # Deploy on EC2
        echo "🚀 Deploying on EC2..."
        ssh -i ~/.ssh/app2-key-pair.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "🚀 DEPLOYING APPLICATION"
          echo "========================"
          
          cd /home/ec2-user
          
          # Clean up
          echo "🧹 Cleaning up..."
          pkill -f "node.*server.js" 2>/dev/null || true
          rm -rf app2* 2>/dev/null || true
          
          # Extract deployment
          echo "📦 Extracting deployment..."
          mkdir -p app2
          cd app2
          tar -xzf ../app2-deployment.tar.gz
          
          # Create .env file
          echo "📝 Creating .env file..."
          cat > .env << 'ENVEOF'
NODE_ENV=${{ secrets.NODE_ENV }}
PORT=${{ secrets.PORT }}
ENVIRONMENT=${{ secrets.ENVIRONMENT }}
AWS_REGION=${{ secrets.AWS_REGION }}
AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
ADMIN_KEYS_TABLE=${{ secrets.ADMIN_KEYS_TABLE }}
EXTERNAL_USER_LOGS_TABLE=${{ secrets.EXTERNAL_USER_LOGS_TABLE }}
DDB_USERS_TABLE=${{ secrets.DDB_USERS_TABLE }}
DDB_CUSTOMERS_TABLE=${{ secrets.DDB_CUSTOMERS_TABLE }}
DDB_FEEDBACK_TABLE=${{ secrets.DDB_FEEDBACK_TABLE }}
DDB_ORDERS_TABLE=${{ secrets.DDB_ORDERS_TABLE }}
DDB_ANALYTICS_TABLE=${{ secrets.DDB_ANALYTICS_TABLE }}
DDB_ADMIN_KEYS_TABLE=${{ secrets.DDB_ADMIN_KEYS_TABLE }}
DDB_EXTERNAL_LOGS_TABLE=${{ secrets.DDB_EXTERNAL_LOGS_TABLE }}
REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}
REACT_APP_ENVIRONMENT=${{ secrets.REACT_APP_ENVIRONMENT }}
REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }}
REACT_APP_BUILD_ENV=${{ secrets.REACT_APP_BUILD_ENV }}
REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}
REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}
REACT_APP_ENABLE_LOGGING=${{ secrets.REACT_APP_ENABLE_LOGGING }}
REACT_APP_ENABLE_ANALYTICS=${{ secrets.REACT_APP_ENABLE_ANALYTICS }}
ADMIN_GLOBAL_KEY=${{ secrets.ADMIN_GLOBAL_KEY }}
JWT_SECRET=${{ secrets.JWT_SECRET }}
PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}
CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
LOG_LEVEL=${{ secrets.LOG_LEVEL }}
LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}
MAX_REQUEST_SIZE=${{ secrets.MAX_REQUEST_SIZE }}
REQUEST_TIMEOUT=${{ secrets.REQUEST_TIMEOUT }}
FRONTEND_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}
BACKEND_URL=${{ secrets.BACKEND_URL }}
EC2_HOST=${{ secrets.EC2_HOST }}
EC2_USER=${{ secrets.EC2_USER }}
EC2_SSH_KEY_PATH=${{ secrets.EC2_SSH_KEY_PATH }}
EC2_SSH_PRIVATE_KEY=${{ secrets.EC2_SSH_PRIVATE_KEY }}
ENVEOF
          
          # Install Node.js if not present
          echo "📦 Checking Node.js..."
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          # Install PM2 if not present
          echo "📦 Checking PM2..."
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm ci --only=production
          
          # Start application with PM2
          echo "🚀 Starting application with PM2..."
          pm2 stop app2-backend 2>/dev/null || true
          pm2 delete app2-backend 2>/dev/null || true
          pm2 start server.js --name app2-backend --env production
          pm2 save
          
          # Wait for startup
          sleep 10
          
          # Check status
          echo "📊 Checking status..."
          pm2 status
          pm2 logs app2-backend --lines 10
          
          echo "✅ Deployment completed!"
        EOF
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 20
        
        for i in {1..5}; do
          echo "Attempt $i/5: Testing connection to ${{ secrets.EC2_HOST }}:3001"
          if curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.EC2_HOST }}:3001/; then
            echo "✅ Application is running successfully!"
            echo "🎉 DEPLOYMENT SUCCESSFUL!"
            exit 0
          else
            echo "❌ Connection failed, waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
        echo "❌ Application verification failed after 5 attempts"
        exit 1
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/app2-key-pair.pem
        rm -f app2-deployment.tar.gz