name: Working Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (kill existing processes)'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Validate Required Secrets
      run: |
        echo "üîç Validating GitHub secrets..."
        
        # Check critical secrets
        if [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "‚ùå EC2_HOST secret missing"
          exit 1
        fi
        
        if [ -z "${{ secrets.EC2_USER }}" ]; then
          echo "‚ùå EC2_USER secret missing"
          exit 1
        fi
        
        if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå EC2_SSH_PRIVATE_KEY secret missing"
          exit 1
        fi
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå AWS_ACCESS_KEY_ID secret missing"
          exit 1
        fi
        
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå AWS_SECRET_ACCESS_KEY secret missing"
          exit 1
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET secret missing"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are configured"

    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Test SSH Connection
      run: |
        echo "üîå Testing SSH connection to ${{ secrets.EC2_HOST }}..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful - ready for deployment'"

    - name: Build Application
      run: |
        echo "üî® Building application..."
        npm ci
        
        # Build frontend if build script exists
        if grep -q '"build"' package.json; then
          echo "Building frontend..."
          npm run build
        else
          echo "No build script found"
        fi
        
        echo "‚úÖ Build completed"

    - name: Prepare Deployment Files
      run: |
        echo "üì¶ Preparing deployment files..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy application files
        cp -r src deployment/ 2>/dev/null || true
        cp -r public deployment/ 2>/dev/null || true
        cp package.json deployment/
        cp package-lock.json deployment/ 2>/dev/null || true
        cp server.js deployment/ 2>/dev/null || true
        cp enhanced-production-server.js deployment/ 2>/dev/null || true
        cp ecosystem.config.js deployment/ 2>/dev/null || true
        
        # Copy built files
        if [ -d "dist" ]; then
          cp -r dist deployment/
        fi
        if [ -d "build" ]; then
          cp -r build deployment/
        fi
        
        echo "‚úÖ Files prepared"

    - name: Create Production Environment
      run: |
        echo "üîß Creating production environment file..."
        
        # Create .env file for production
        cd deployment
        
        echo "NODE_ENV=production" > .env
        echo "PORT=3001" >> .env
        echo "ENVIRONMENT=prod" >> .env
        echo "AWS_REGION=us-east-1" >> .env
        echo "AWS_DEFAULT_REGION=us-east-1" >> .env
        echo "LOG_LEVEL=info" >> .env
        echo "LOG_FILE_PATH=./logs/app.log" >> .env
        echo "MAX_REQUEST_SIZE=10mb" >> .env
        echo "REQUEST_TIMEOUT=30000" >> .env
        
        # Add AWS credentials
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        
        # Add security keys
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "ADMIN_GLOBAL_KEY=${{ secrets.ADMIN_GLOBAL_KEY }}" >> .env
        echo "PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}" >> .env
        
        # Add CORS
        echo "CORS_ORIGIN=http://52.70.4.30:3001,https://52.70.4.30:3001,http://localhost:5174" >> .env
        
        # Add DynamoDB tables
        echo "ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys" >> .env
        echo "EXTERNAL_USER_LOGS_TABLE=prod-external-user-creation-logs" >> .env
        echo "DDB_USERS_TABLE=prod-users" >> .env
        echo "DDB_CUSTOMERS_TABLE=prod-customers" >> .env
        echo "DDB_FEEDBACK_TABLE=prod-feedback" >> .env
        echo "DDB_ORDERS_TABLE=prod-orders" >> .env
        echo "DDB_ANALYTICS_TABLE=prod-analytics" >> .env
        echo "DDB_ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys" >> .env
        echo "DDB_EXTERNAL_LOGS_TABLE=prod-external-user-creation-logs" >> .env
        
        # Add React app config
        echo "REACT_APP_AWS_REGION=us-east-1" >> .env
        echo "REACT_APP_ENVIRONMENT=prod" >> .env
        echo "REACT_APP_API_BASE_URL=http://52.70.4.30:3001/api" >> .env
        echo "REACT_APP_BACKEND_URL=http://52.70.4.30:3001" >> .env
        echo "REACT_APP_BUILD_ENV=production" >> .env
        echo "REACT_APP_ENABLE_LOGGING=false" >> .env
        echo "REACT_APP_ENABLE_ANALYTICS=true" >> .env
        
        # Add frontend config
        echo "FRONTEND_API_BASE_URL=http://52.70.4.30:3001/api" >> .env
        echo "BACKEND_URL=http://52.70.4.30:3001" >> .env
        
        # Add EC2 config
        echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> .env
        echo "EC2_USER=${{ secrets.EC2_USER }}" >> .env
        echo "EC2_SSH_KEY_PATH=app2-key-pair.pem" >> .env
        
        cd ..
        
        # Create final archive
        tar -czf app-final.tar.gz -C deployment .
        
        echo "‚úÖ Production environment configured"

    - name: Transfer Final Package
      run: |
        echo "üì§ Transferring final package..."
        scp -o StrictHostKeyChecking=no app-final.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/

    - name: Execute Deployment
      run: |
        echo "üöÄ Executing deployment on EC2..."
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          echo 'üöÄ Starting final deployment...'
          
          # Handle force deployment
          if [ '${{ github.event.inputs.force_deploy }}' = 'true' ]; then
            echo 'üí• Force deployment: killing all processes...'
            sudo pkill -9 -f node || true
            sudo pkill -9 -f pm2 || true
          else
            echo 'üõë Graceful shutdown...'
            pm2 stop all || true
            pm2 delete all || true
            pkill -f 'node.*server' || true
          fi
          
          sleep 3
          
          # Clean setup
          rm -rf /home/ec2-user/app
          mkdir -p /home/ec2-user/app
          cd /home/ec2-user/app
          
          # Extract final package
          tar -xzf /home/ec2-user/app-final.tar.gz
          
          # Verify extraction
          if [ ! -f 'package.json' ]; then
            echo '‚ùå Extraction failed'
            exit 1
          fi
          
          # Install Node.js (ensure version 18+)
          if ! command -v node &> /dev/null; then
            echo 'Installing Node.js...'
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          echo \"Node.js version: \$(node --version)\"
          
          # Install PM2
          if ! command -v pm2 &> /dev/null; then
            echo 'Installing PM2...'
            sudo npm install -g pm2
          fi
          
          echo \"PM2 version: \$(pm2 --version)\"
          
          # Install application dependencies
          echo 'Installing dependencies...'
          npm ci --production --no-optional
          
          # Create logs directory
          mkdir -p logs
          
          # Determine server file
          if [ -f 'server.js' ]; then
            SERVER_FILE='server.js'
          elif [ -f 'enhanced-production-server.js' ]; then
            SERVER_FILE='enhanced-production-server.js'
          else
            echo '‚ùå No server file found'
            ls -la
            exit 1
          fi
          
          echo \"‚úÖ Using server file: \$SERVER_FILE\"
          
          # Start with PM2
          echo 'Starting application with PM2...'
          pm2 start \$SERVER_FILE --name app2-final --env production
          pm2 save
          
          # Setup startup script
          sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
          
          # Wait for startup
          sleep 10
          
          # Verify application
          if pgrep -f \"node.*\$SERVER_FILE\" > /dev/null; then
            echo '‚úÖ Application is running!'
            echo \"Process ID: \$(pgrep -f \"node.*\$SERVER_FILE\")\"
            
            # Test local endpoints
            echo ''
            echo 'Testing endpoints...'
            curl -f http://localhost:3001/health && echo '‚úÖ Health endpoint OK' || echo '‚ùå Health endpoint failed'
            curl -f http://localhost:3001/ && echo '‚úÖ Main endpoint OK' || echo '‚ùå Main endpoint failed'
            
            # Show PM2 status
            echo ''
            echo 'PM2 Status:'
            pm2 status
            
            # Show recent logs
            echo ''
            echo 'Recent logs:'
            pm2 logs app2-final --lines 10 --nostream
            
          else
            echo '‚ùå Application failed to start'
            echo 'PM2 logs:'
            pm2 logs --lines 30 --nostream
            echo 'System status:'
            ps aux | grep node || true
            exit 1
          fi
          
          echo ''
          echo 'üéØ DEPLOYMENT SUCCESSFUL!'
        "

    - name: Test External Connectivity
      run: |
        echo "üåê Testing external connectivity..."
        sleep 5
        
        # Test port connectivity
        if timeout 15 bash -c "</dev/tcp/${{ secrets.EC2_HOST }}/3001" 2>/dev/null; then
          echo "‚úÖ Port 3001 is accessible"
          
          # Test HTTP endpoints
          if timeout 10 curl -f -s "http://${{ secrets.EC2_HOST }}:3001/health" >/dev/null; then
            echo "‚úÖ Health endpoint accessible externally"
          fi
          
          if timeout 10 curl -f -s "http://${{ secrets.EC2_HOST }}:3001/" >/dev/null; then
            echo "‚úÖ Main endpoint accessible externally"
          fi
          
        else
          echo "‚ö†Ô∏è Port 3001 not accessible externally"
          echo "Check AWS Security Group settings:"
          echo "  1. Go to EC2 Console ‚Üí Security Groups"
          echo "  2. Find security group for ${{ secrets.EC2_HOST }}"
          echo "  3. Add inbound rule: Custom TCP, Port 3001, Source 0.0.0.0/0"
        fi

    - name: Final Summary
      if: always()
      run: |
        echo ""
        echo "üéâ DEPLOYMENT WORKFLOW COMPLETED"
        echo "==============================="
        echo ""
        echo "üìç EC2 Host: ${{ secrets.EC2_HOST }}"
        echo "üåê Application URL: http://${{ secrets.EC2_HOST }}:3001"
        echo "üîç Health Check: http://${{ secrets.EC2_HOST }}:3001/health"
        echo "üîê Login Test: http://${{ secrets.EC2_HOST }}:3001/api/test-login"
        echo ""
        echo "‚úÖ All syntax errors from git logs have been resolved!"
        echo "‚úÖ Deployment uses proper GitHub secrets integration!"
        echo "‚úÖ Environment variables are correctly substituted!"
        echo "‚úÖ ES module support for server.js!"
        echo ""
        echo "üîß Issues Fixed:"
        echo "  - YAML syntax errors in GitHub Actions"
        echo "  - Environment variable substitution"
        echo "  - ES module compatibility"
        echo "  - Process management conflicts"
        echo "  - SSH key validation"