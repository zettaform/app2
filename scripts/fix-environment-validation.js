#!/usr/bin/env node

/**
 * Environment Validation Fix Script
 * Creates a comprehensive .env file for production deployment
 * with all required environment variables and proper validation
 */

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

console.log('üîß ENVIRONMENT VALIDATION FIX SCRIPT');
console.log('====================================');
console.log('');

// Generate secure random strings
const generateSecureString = (length = 64) => {
  return crypto.randomBytes(length).toString('hex');
};

// Create production environment configuration
const createProductionEnv = () => {
  console.log('üìù Creating production environment configuration...');
  
  const envContent = `# ========================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# Generated by fix-environment-validation.js
# ========================================

# Application Configuration
NODE_ENV=production
PORT=3001
ENVIRONMENT=prod

# AWS Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}

# DynamoDB Tables
ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
EXTERNAL_USER_LOGS_TABLE=prod-external-user-creation-logs
DDB_USERS_TABLE=prod-users
DDB_CUSTOMERS_TABLE=prod-customers
DDB_FEEDBACK_TABLE=prod-feedback
DDB_ORDERS_TABLE=prod-orders
DDB_ANALYTICS_TABLE=prod-analytics
DDB_ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
DDB_EXTERNAL_LOGS_TABLE=prod-external-user-creation-logs

# Security & Authentication
ADMIN_GLOBAL_KEY=\${ADMIN_GLOBAL_KEY}
JWT_SECRET=\${JWT_SECRET}
PASSWORD_SALT=\${PASSWORD_SALT}

# CORS Configuration
CORS_ORIGIN=http://localhost:5174,https://yourdomain.com

# Logging Configuration
LOG_LEVEL=info
LOG_FILE_PATH=./logs/app.log

# Performance & Monitoring
MAX_REQUEST_SIZE=10mb
REQUEST_TIMEOUT=30000

# React App Environment Variables
REACT_APP_AWS_REGION=us-east-1
REACT_APP_ENVIRONMENT=prod
REACT_APP_API_BASE_URL=https://yourdomain.com/api
REACT_APP_BACKEND_URL=https://yourdomain.com
REACT_APP_BUILD_ENV=production
REACT_APP_AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
REACT_APP_AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}
REACT_APP_ENABLE_LOGGING=false
REACT_APP_ENABLE_ANALYTICS=true

# Frontend Configuration
FRONTEND_API_BASE_URL=https://yourdomain.com/api
BACKEND_URL=https://yourdomain.com

# EC2 Deployment Configuration
EC2_HOST=52.70.4.30
EC2_USER=ec2-user
EC2_SSH_KEY_PATH=app2-key-pair.pem
`;

  return envContent;
};

// Create GitHub secrets validation script
const createGitHubSecretsValidation = () => {
  console.log('üîë Creating GitHub secrets validation script...');
  
  const secretsScript = `#!/bin/bash

# GitHub Secrets Validation Script
# Validates that all required secrets are configured in GitHub

echo "üîç GITHUB SECRETS VALIDATION"
echo "============================="
echo ""

# List of required GitHub secrets
REQUIRED_SECRETS=(
  "AWS_ACCESS_KEY_ID"
  "AWS_SECRET_ACCESS_KEY"
  "JWT_SECRET"
  "ADMIN_GLOBAL_KEY"
  "PASSWORD_SALT"
  "EC2_SSH_PRIVATE_KEY"
  "EC2_HOST"
  "EC2_USER"
)

# Check if secrets are accessible (this will only work in GitHub Actions)
echo "üìã Checking GitHub secrets availability..."
echo ""

for secret in "\${REQUIRED_SECRETS[@]}"; do
  if [ -n "\$$secret" ]; then
    echo "‚úÖ $secret: CONFIGURED"
  else
    echo "‚ùå $secret: NOT SET"
  fi
done

echo ""
echo "üí° If any secrets show as 'NOT SET', configure them in:"
echo "   GitHub Repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
echo ""

# Validate JWT_SECRET length
if [ -n "$JWT_SECRET" ]; then
  JWT_LENGTH=\${#JWT_SECRET}
  if [ $JWT_LENGTH -ge 32 ]; then
    echo "‚úÖ JWT_SECRET length: $JWT_LENGTH characters (valid)"
  else
    echo "‚ùå JWT_SECRET length: $JWT_LENGTH characters (minimum 32 required)"
  fi
else
  echo "‚ùå JWT_SECRET: NOT SET"
fi

echo ""
echo "üöÄ Environment validation complete!"
`;

  return secretsScript;
};

// Create environment setup script for EC2
const createEC2EnvironmentSetup = () => {
  console.log('üñ•Ô∏è Creating EC2 environment setup script...');
  
  const setupScript = `#!/bin/bash

# EC2 Environment Setup Script
# Sets up environment variables on EC2 instance

echo "üîß EC2 ENVIRONMENT SETUP"
echo "========================="
echo ""

# Create .env file on EC2
echo "üìù Creating .env file on EC2..."

cat > /home/ec2-user/.env << 'EOF'
# ========================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# ========================================

# Application Configuration
NODE_ENV=production
PORT=3001
ENVIRONMENT=prod

# AWS Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}

# DynamoDB Tables
ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
EXTERNAL_USER_LOGS_TABLE=prod-external-user-creation-logs
DDB_USERS_TABLE=prod-users
DDB_CUSTOMERS_TABLE=prod-customers
DDB_FEEDBACK_TABLE=prod-feedback
DDB_ORDERS_TABLE=prod-orders
DDB_ANALYTICS_TABLE=prod-analytics
DDB_ADMIN_KEYS_TABLE=prod-admin-keys-table-admin-keys
DDB_EXTERNAL_LOGS_TABLE=prod-external-user-creation-logs

# Security & Authentication
ADMIN_GLOBAL_KEY=\${ADMIN_GLOBAL_KEY}
JWT_SECRET=\${JWT_SECRET}
PASSWORD_SALT=\${PASSWORD_SALT}

# CORS Configuration
CORS_ORIGIN=http://localhost:5174,https://yourdomain.com

# Logging Configuration
LOG_LEVEL=info
LOG_FILE_PATH=./logs/app.log

# Performance & Monitoring
MAX_REQUEST_SIZE=10mb
REQUEST_TIMEOUT=30000

# React App Environment Variables
REACT_APP_AWS_REGION=us-east-1
REACT_APP_ENVIRONMENT=prod
REACT_APP_API_BASE_URL=https://yourdomain.com/api
REACT_APP_BACKEND_URL=https://yourdomain.com
REACT_APP_BUILD_ENV=production
REACT_APP_AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
REACT_APP_AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}
REACT_APP_ENABLE_LOGGING=false
REACT_APP_ENABLE_ANALYTICS=true

# Frontend Configuration
FRONTEND_API_BASE_URL=https://yourdomain.com/api
BACKEND_URL=https://yourdomain.com

# EC2 Deployment Configuration
EC2_HOST=52.70.4.30
EC2_USER=ec2-user
EC2_SSH_KEY_PATH=app2-key-pair.pem
EOF

echo "‚úÖ .env file created on EC2"
echo ""

# Set proper permissions
chmod 600 /home/ec2-user/.env
echo "‚úÖ Set secure permissions on .env file"
echo ""

# Validate environment file
echo "üîç Validating environment configuration..."
if [ -f /home/ec2-user/.env ]; then
  echo "‚úÖ .env file exists"
  
  # Check for required variables
  if grep -q "AWS_ACCESS_KEY_ID" /home/ec2-user/.env; then
    echo "‚úÖ AWS_ACCESS_KEY_ID placeholder found"
  else
    echo "‚ùå AWS_ACCESS_KEY_ID placeholder missing"
  fi
  
  if grep -q "JWT_SECRET" /home/ec2-user/.env; then
    echo "‚úÖ JWT_SECRET placeholder found"
  else
    echo "‚ùå JWT_SECRET placeholder missing"
  fi
  
  if grep -q "ADMIN_GLOBAL_KEY" /home/ec2-user/.env; then
    echo "‚úÖ ADMIN_GLOBAL_KEY placeholder found"
  else
    echo "‚ùå ADMIN_GLOBAL_KEY placeholder missing"
  fi
else
  echo "‚ùå .env file not found"
fi

echo ""
echo "üöÄ EC2 environment setup complete!"
echo ""
echo "üí° Next steps:"
echo "1. Ensure GitHub secrets are configured with actual values"
echo "2. Deploy the application using the deployment workflow"
echo "3. Verify the application starts successfully"
`;

  return setupScript;
};

// Main execution
const main = () => {
  try {
    // Create production .env file
    const envContent = createProductionEnv();
    fs.writeFileSync('.env.production', envContent);
    console.log('‚úÖ Created .env.production file');
    
    // Create GitHub secrets validation script
    const secretsScript = createGitHubSecretsValidation();
    fs.writeFileSync('scripts/validate-github-secrets.sh', secretsScript);
    fs.chmodSync('scripts/validate-github-secrets.sh', '755');
    console.log('‚úÖ Created scripts/validate-github-secrets.sh');
    
    // Create EC2 environment setup script
    const setupScript = createEC2EnvironmentSetup();
    fs.writeFileSync('scripts/setup-ec2-environment.sh', setupScript);
    fs.chmodSync('scripts/setup-ec2-environment.sh', '755');
    console.log('‚úÖ Created scripts/setup-ec2-environment.sh');
    
    console.log('');
    console.log('üéØ ENVIRONMENT VALIDATION FIX COMPLETE!');
    console.log('========================================');
    console.log('');
    console.log('üìÅ Files created:');
    console.log('  - .env.production (production environment template)');
    console.log('  - scripts/validate-github-secrets.sh (GitHub secrets validation)');
    console.log('  - scripts/setup-ec2-environment.sh (EC2 environment setup)');
    console.log('');
    console.log('üîë Required GitHub Secrets:');
    console.log('  - AWS_ACCESS_KEY_ID (your AWS access key)');
    console.log('  - AWS_SECRET_ACCESS_KEY (your AWS secret key)');
    console.log('  - JWT_SECRET (at least 32 characters)');
    console.log('  - ADMIN_GLOBAL_KEY (secure admin key)');
    console.log('  - PASSWORD_SALT (secure password salt)');
    console.log('  - EC2_SSH_PRIVATE_KEY (your EC2 SSH private key)');
    console.log('  - EC2_HOST (52.70.4.30)');
    console.log('  - EC2_USER (ec2-user)');
    console.log('');
    console.log('üöÄ Next steps:');
    console.log('1. Configure the GitHub secrets listed above');
    console.log('2. Run the deployment workflow');
    console.log('3. Verify the application starts successfully on EC2');
    
  } catch (error) {
    console.error('‚ùå Error creating environment validation fix:', error.message);
    process.exit(1);
  }
};

// Run the script
main();